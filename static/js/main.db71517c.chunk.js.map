{"version":3,"sources":["model/Phase.js","App.js","serviceWorker.js","index.js"],"names":["Phase","orderId","name","seconds","next","this","phases","getPhase","index","filter","p","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","App","useState","timer","setTimer","isRunning","setRunning","currentPhase","setCurrentPhase","newPhase","formatTime","time","Math","floor","toString","padStart","document","title","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2QAAaA,EACT,WAAYC,EAASC,EAAMC,EAASC,GAAO,oBACvCC,KAAKJ,QAAUA,EACfI,KAAKH,KAAOA,EACZG,KAAKF,QAAUA,EACfE,KAAKD,KAAOA,GCgDpB,IAAME,EAAS,CACX,IAAIN,EAAM,EAAG,WAAY,KAAS,GAClC,IAAIA,EAAM,EAAG,cAAe,IAAQ,GACpC,IAAIA,EAAM,EAAG,WAAY,KAAS,GAClC,IAAIA,EAAM,EAAG,cAAe,IAAQ,GACpC,IAAIA,EAAM,EAAG,WAAY,KAAS,GAClC,IAAIA,EAAM,EAAG,cAAe,IAAQ,GACpC,IAAIA,EAAM,EAAG,WAAY,KAAS,GAClC,IAAIA,EAAM,EAAG,aAAc,IAAS,IAGlCO,EAAW,SAACC,GAAD,OAAWF,EAAOG,QAAO,SAAAC,GAAC,OAAIA,EAAET,UAAYO,KAAO,IAE9DG,EAAc,SAACC,EAAUC,GAC3B,IAAMC,EAAgBC,mBAEtBC,qBAAU,WACNF,EAAcG,QAAUL,IACzB,CAACA,IAEJI,qBAAU,WAKN,GAAc,OAAVH,EAAgB,CAChB,IAAIK,EAAKC,aALb,WACIL,EAAcG,YAIaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAEhC,CAACL,KAGOQ,EAjFf,WAAgB,IAAD,EACaC,mBAASf,EAAS,GAAGJ,SADlC,mBACNoB,EADM,KACCC,EADD,OAEmBF,oBAAS,GAF5B,mBAENG,EAFM,KAEKC,EAFL,OAG2BJ,mBAAShB,EAAO,IAH3C,mBAGNqB,EAHM,KAGQC,EAHR,KAKXjB,GAAY,WAER,GADAa,EAASD,EAAQ,GACbA,GAAS,EAAG,CACZ,IAAIM,EAAWtB,EAASoB,EAAavB,MACrCoB,EAASK,EAAS1B,SAClByB,EAAgBC,MAErBJ,EAAY,IAAO,MAEtB,IASMK,EAAa,SAACC,GAChB,IACM5B,EAAU4B,EAAO,GACvB,OAFgBC,KAAKC,MAAMF,EAAO,IAEnBG,WAAWC,SAAS,EAAG,KAAO,IAAMhC,EAAQ+B,WAAWC,SAAS,EAAG,MAKtF,OAFAC,SAASC,MAAQP,EAAWP,GAAS,MAAQI,EAAazB,KAGtD,yBAAKoC,UAAW,OACZ,yBAAKA,UAAW,gBACZ,yBAAKA,UAAW,cACXX,EAAazB,MAElB,yBAAKoC,UAAW,cACXR,EAAWP,KAGpB,6BACI,4BAAQgB,QA5BG,WACnBb,GAAYD,KA2B8BA,EAAY,QAAU,SACxD,4BAAQc,QAzBE,WAClBf,EAASG,EAAaxB,SACtBuB,GAAW,KAuBH,YCnCIc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFX,SAASY,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.db71517c.chunk.js","sourcesContent":["export class Phase {\r\n    constructor(orderId, name, seconds, next) {\r\n        this.orderId = orderId;\r\n        this.name = name;\r\n        this.seconds = seconds;\r\n        this.next = next;\r\n    }\r\n}","import React, {useEffect, useRef, useState} from 'react';\nimport './App.css';\nimport {Phase} from \"./model/Phase\";\n\nfunction App() {\n    let [timer, setTimer] = useState(getPhase(0).seconds);\n    let [isRunning, setRunning] = useState(false);\n    let [currentPhase, setCurrentPhase] = useState(phases[0]);\n\n    useInterval(() => {\n        setTimer(timer - 1);\n        if (timer <= 0) {\n            let newPhase = getPhase(currentPhase.next);\n            setTimer(newPhase.seconds);\n            setCurrentPhase(newPhase);\n        }\n    }, isRunning ? 1000 : null);\n\n    const setRunningFlag = () => {\n        setRunning(!isRunning);\n    };\n\n    const resetCounting = () => {\n        setTimer(currentPhase.seconds);\n        setRunning(false);\n    };\n\n    const formatTime = (time) => {\n        const minutes = Math.floor(time / 60);\n        const seconds = time % 60;\n        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');\n    }\n\n    document.title = formatTime(timer) + ' - ' + currentPhase.name;\n\n    return (\n        <div className={'App'}>\n            <div className={'time-section'}>\n                <div className={'phase-name'}>\n                    {currentPhase.name}\n                </div>\n                <div className={'time-value'}>\n                    {formatTime(timer)}\n                </div>\n            </div>\n            <div>\n                <button onClick={setRunningFlag}>{isRunning ? 'PAUSE' : 'START'}</button>\n                <button onClick={resetCounting}>RESET</button>\n            </div>\n        </div>\n    );\n}\n\nconst phases = [\n    new Phase(0, 'Pomodoro', 25 * 60, 1),\n    new Phase(1, 'Short break', 5 * 60, 2),\n    new Phase(2, 'Pomodoro', 25 * 60, 3),\n    new Phase(3, 'Short break', 5 * 60, 4),\n    new Phase(4, 'Pomodoro', 25 * 60, 5),\n    new Phase(5, 'Short break', 5 * 60, 6),\n    new Phase(6, 'Pomodoro', 25 * 60, 7),\n    new Phase(7, 'Long break', 15 * 60, 0),\n];\n\nconst getPhase = (index) => phases.filter(p => p.orderId === index)[0];\n\nconst useInterval = (callback, delay) => {\n    const savedCallback = useRef();\n\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}